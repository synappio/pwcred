#!/usr/bin/env python
"""Usage:
    pwcred <config> process <directory>
    pwcred <config> add-client <directory> <name> <context>
    pwcred <config> list-clients
    pwcred [options] <config> client-read <cname> <key>

Options:
  -h --help                   show this help message and exit
  -k KEYFILE --key KEYFILE    private client key file
"""
import sys
import json
import subprocess
import logging.config

import bson
from path import path
from docopt import docopt
from pyramid.paster import bootstrap
from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Cipher import PKCS1_OAEP, AES

from pwcred import model as M
from pwcred import security

import yaml

def main():
    args = docopt(__doc__)
    bootstrap(args['<config>'])
    if args['process']:
        do_process(args['<directory>'])
    elif args['add-client']:
        do_add_client(
            args['<directory>'], args['<name>'], args['<context>'])
    elif args['list-clients']:
        do_list_clients()
    elif args['client-read']:
        do_client_read(
            args['<cname>'],
            args['<key>'],
            args.get('--key'))
    else:
        raise NotImplementedError, repr(args)

def do_process(dirname):
    for fn in path(dirname).glob('*.yml'):
        print 'Processing %s' % fn
        with open(fn) as fp:
            _process(**yaml.load(fp))

def do_add_client(dirname, name, context):
    # Generate keys if they don't exist
    keyfile = path(dirname) / name
    if not keyfile.exists():
        subprocess.check_call(
            ['ssh-keygen', '-f', keyfile, '-P', '', '-b', '2048', '-q', '-C', name])
    pubkeyfile = keyfile + '.pub'
    with pubkeyfile.open('rb') as fp:
        M.client.m.collection.update(
            dict(_id=name),
            {'$set': dict(context=context, public_key=fp.read()) },
            upsert=True)
    print 'Created client %s with context %s' % (name, context)

def do_list_clients():
    fmt = '%20.20s %20.20s'
    print fmt % ('Context', 'Name')
    print fmt % ('-'*20, '-'*20)
    for cli in M.client.m.find():
        print fmt % (cli.context, cli._id)

def do_client_read(cname, key, fn_private_key=None):
    creds = M.credentials.m.get(key=key, client_id=cname)
    assert creds
    if fn_private_key is None:
        print '<Enc %r>' % creds.creds
        return
    with path(fn_private_key).open() as fp:
        plaintext = security.decrypt(
            fp.read(), creds.enc_aes_key, creds.aes_iv, creds.enc_creds)
        data = json.loads(security.unpad(plaintext))
        for k,v in sorted(data.items()):
            print '%s=%s' % (k,v)

def _process(key=None, context=None, creds=None):
    plain_cred_data = json.dumps(creds)
    plaintext = security.pad(plain_cred_data)
    for cli in M.client.m.find(dict(context=context)):
        enc_aes_key, aes_iv, ciphertext = security.encrypt(cli.public_key, plaintext)
        M.credentials.m.collection.update(
            dict(key=key, client_id=cli._id),
            {'$set': dict(
                    enc_aes_key=bson.Binary(enc_aes_key),
                    aes_iv=bson.Binary(aes_iv),
                    enc_creds=bson.Binary(ciphertext)
                    )
             },
            upsert=True)
        
def _cipher(key):
    return PKCS1_OAEP.new(key)

if __name__ == '__main__':
    main()

