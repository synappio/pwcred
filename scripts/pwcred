#!/usr/bin/env python
"""Usage:
    pwcred [options] process <yaml>...
    pwcred [options] client list
    pwcred [options] client <client> add <context>
    pwcred [options] client <client> delete
    pwcred [options] client <client> read <key>

Options:
  -h --help                            show this help message and exit
  -c FILE --config FILE                pwcred config file (.ini) [default: .pwcred]
  -k FILE --key FILE                   private client key file
  -u URI --dburi URI                   MongoDB URI [default: mongodb://localhost:27017/pwcred]
  -d DIRECTORY --directory DIRECTORY   Directory in which to store pub/private keys
  -l FILE --logging FILE               Logging config file
"""
import sys
import json
import subprocess
from ConfigParser import ConfigParser
import logging.config

import bson
from path import path
from docopt import docopt
from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Cipher import PKCS1_OAEP, AES

def main(args):
    import ming.config
    from pwcred.app import Application
    ming.config.configure_from_nested_dict(dict(
            pwcred=dict(uri=args['--dburi'])))
    app = Application(args)
    if args['process']:
        return app.do_process(args['<yaml>'])
    elif args['client']:
        if args['list']:
            return app.do_list_clients()
        elif args['add']:
            return app.do_add_client(args['<client>'], args['<context>'])
        elif args['read']:
            return app.do_client_read(args['<client>'], args['<key>'])
        elif args['delete']:
            return app.do_client_delete(args['<client>'])
    raise NotImplementedError, repr(args)

if __name__ == '__main__':
    args = docopt(__doc__)
    if args['--logging']:
        logging.config.fileConfig(args['--logging'])
    cp = ConfigParser()
    cp.read(args['--config'])
    for key, value in cp.items('pwcred'):
        if value.startswith('heroku$'):
            configvalue = value.split('$', 1)[-1]
            value = subprocess.check_output(['heroku', 'config:get', configvalue])
            print value
            import pdb; pdb.set_trace()
        args['--' + key] = value
    main(args)

